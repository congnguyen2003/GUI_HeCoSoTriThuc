"""
--------------------------------------------------------------
Ch·ª©c nƒÉng:
1. H·ªó tr·ª£ hai ki·ªÉu agenda: STACK (LIFO) v√† QUEUE (FIFO)
2. H·ªó tr·ª£ ch·ªçn lu·∫≠t theo ch·ªâ s·ªë nh·ªè nh·∫•t (min) ho·∫∑c l·ªõn nh·∫•t (max)
3. X√¢y d·ª±ng v√† v·∫Ω ƒë·ªì th·ªã FPG (Forward Proof Graph) v√† RPG (Reverse Proof Graph)
--------------------------------------------------------------
Y√™u c·∫ßu th∆∞ vi·ªán: networkx, matplotlib
C√†i ƒë·∫∑t b·∫±ng:
    pip install networkx matplotlib
--------------------------------------------------------------
"""

from collections import deque
import networkx as nx
import matplotlib.pyplot as plt

# ==================== C√ÅC H√ÄM CH√çNH ==================== #

def tim_luat_kha_dung(facts, rules):
    """Tr·∫£ v·ªÅ danh s√°ch ch·ªâ s·ªë c√°c lu·∫≠t c√≥ th·ªÉ √°p d·ª•ng (premises c√≥ trong facts)."""
    ket_qua = []
    for i, (premises, conclusion) in enumerate(rules):
        if premises.issubset(facts) and conclusion not in facts:
            ket_qua.append(i)
    return ket_qua


def chon_luat(danh_sach, kieu_chon):
    """Ch·ªçn lu·∫≠t theo ki·ªÉu: min / max / first."""
    if not danh_sach:
        return None
    if kieu_chon == 'min':
        return min(danh_sach)
    if kieu_chon == 'max':
        return max(danh_sach)
    return danh_sach[0]


def suy_dien_tien(facts, rules, goal=None, agenda='queue', rule_select='min', verbose=False):
    """
    Suy di·ªÖn ti·∫øn d·ª±a tr√™n t·∫≠p lu·∫≠t v√† fact ban ƒë·∫ßu.

    Tham s·ªë:
        facts: danh s√°ch fact ban ƒë·∫ßu
        rules: danh s√°ch (premises, conclusion)
        goal: fact c·∫ßn ƒë·∫°t (n·∫øu c√≥)
        agenda: 'queue' (FIFO) ho·∫∑c 'stack' (LIFO)
        rule_select: 'min', 'max', ho·∫∑c 'first'
        verbose: in ra qu√° tr√¨nh suy di·ªÖn
    """

    facts = set(facts)

    # Kh·ªüi t·∫°o agenda
    if agenda == 'queue':
        container = deque()
        push = container.append
        pop = container.popleft
    elif agenda == 'stack':
        container = []
        push = container.append
        pop = container.pop
    else:
        raise ValueError("agenda ph·∫£i l√† 'queue' ho·∫∑c 'stack'")

    # Th√™m lu·∫≠t kh·∫£ d·ª•ng ban ƒë·∫ßu
    for i in tim_luat_kha_dung(facts, rules):
        push(i)

    da_xet = set()

    while container:
        # Ch·ªçn lu·∫≠t ph√π h·ª£p
        if rule_select in ('min', 'max'):
            danh_sach = list(container)
            idx = chon_luat(danh_sach, rule_select)
            container.remove(idx)
        else:
            idx = pop()

        premises, conclusion = rules[idx]

        # √Åp d·ª•ng lu·∫≠t n·∫øu c√≥ th·ªÉ
        if premises.issubset(facts) and conclusion not in facts:
            facts.add(conclusion)
            if verbose:
                print(f"‚úî Suy ra: {conclusion} (t·ª´ lu·∫≠t #{idx})")

            # Ki·ªÉm tra goal
            if goal and conclusion == goal:
                print("üéØ ƒê·∫°t m·ª•c ti√™u!")
                return True, facts

            # Th√™m lu·∫≠t m·ªõi kh·∫£ d·ª•ng
            for j in tim_luat_kha_dung(facts, rules):
                if j not in da_xet:
                    push(j)
                    da_xet.add(j)

    return (goal in facts if goal else None), facts


# ==================== H·ªñ TR·ª¢ MIN/MAX ==================== #

def chi_so_min(facts, rules):
    ds = tim_luat_kha_dung(set(facts), rules)
    return min(ds) if ds else None

def chi_so_max(facts, rules):
    ds = tim_luat_kha_dung(set(facts), rules)
    return max(ds) if ds else None


# ==================== ƒê·ªí TH·ªä FPG / RPG ==================== #

def tao_do_thi_FPG(rules):
    G = nx.DiGraph()
    for i, (premises, conclusion) in enumerate(rules):
        rule_node = f"R{i}"
        G.add_node(rule_node, type='rule')
        G.add_node(conclusion, type='fact')
        G.add_edge(rule_node, conclusion)
        for p in premises:
            G.add_node(p, type='fact')
            G.add_edge(p, rule_node)
    return G


def tao_do_thi_RPG(rules):
    return tao_do_thi_FPG(rules).reverse(copy=True)


def ve_do_thi(G, title='ƒê·ªì th·ªã Suy di·ªÖn', filename=None):
    plt.figure(figsize=(10, 6))
    pos = nx.spring_layout(G, seed=42)
    facts = [n for n, d in G.nodes(data=True) if d.get('type') == 'fact']
    rules = [n for n, d in G.nodes(data=True) if d.get('type') == 'rule']
    nx.draw_networkx_nodes(G, pos, nodelist=facts, node_color='lightblue', node_shape='o')
    nx.draw_networkx_nodes(G, pos, nodelist=rules, node_color='lightgreen', node_shape='s')
    nx.draw_networkx_edges(G, pos, arrows=True)
    nx.draw_networkx_labels(G, pos)
    plt.title(title)
    plt.axis('off')
    if filename:
        plt.savefig(filename, bbox_inches='tight')
    plt.show()


# ==================== CH·∫†Y TH·ª¨ ==================== #
if __name__ == '__main__':
    rules = [
        (set(['A', 'B']), 'C'),
        (set(['C']), 'D'),
        (set(['E']), 'B'),
        (set(['D', 'E']), 'X')
    ]
    facts = ['A', 'E']

    print('--- Suy di·ªÖn ti·∫øn (agenda=queue, rule_select=min) ---')
    ket_qua, tap_fact = suy_dien_tien(facts, rules, goal='X', agenda='queue', rule_select='min', verbose=True)
    print('K·∫øt qu·∫£:', ket_qua)
    print('T·∫≠p fact cu·ªëi c√πng:', tap_fact)

    print('\nCh·ªâ s·ªë lu·∫≠t nh·ªè nh·∫•t:', chi_so_min(tap_fact, rules))
    print('Ch·ªâ s·ªë lu·∫≠t l·ªõn nh·∫•t:', chi_so_max(tap_fact, rules))

    print('\n--- ƒê·ªì th·ªã FPG v√† RPG ---')
    FPG = tao_do_thi_FPG(rules)
    RPG = tao_do_thi_RPG(rules)
    ve_do_thi(FPG, 'Forward Proof Graph (FPG)')
    ve_do_thi(RPG, 'Reverse Proof Graph (RPG)')
